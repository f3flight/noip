#!/bin/bash

function fail()
{
    echo "ERROR: $1" 1>&2
    exit 1
}

function warn()
{
    echo "WARNING: $1" 1>&2
}

function info()
{       
    echo "INFO: $1"
}

CONFIG="/etc/noip/noip.conf"
INTERNET_CHECK_COMMAND="ping -c3 8.8.8.8"
PUBLIC_IP_URL="http://myexternalip.com/raw"
NOIP_UPDATE_HOST="dynupdate.no-ip.com"
NOIP_UPDATE_URL="https://$NOIP_UPDATE_HOST/nic/update"
NOIP_LOGIN_PAGE="https://www.noip.com/login"
NOIP_API_HOSTS_URL="https://my.noip.com/api/host/"
DEFAULT_IP_COMMAND="curl -s $PUBLIC_IP_URL"
CHECK_INTERVAL=60
#RENEW_INTERVAL=604800 # 7 days
EXPIRY_CHECK_INTERVAL=172800 # 2 days

if [ "$1" == "-h" ] || [ "$1" == "--help" ]
then
    echo "USAGE: noip [check-interval]"
    echo "CONFIG FILE: $CONFIG"
    echo "CONFIG FILE SYNTAX:"
    echo "    <hostname> <cred-file> [ip_command]"
    echo "    Tab-separated. Can contain multiple lines."
    echo "Config parameter <cred-file> should specify a path to a curl netrc file."
    echo "    Syntax is:"
    echo "        machine $NOIP_UPDATE_HOST login <login> password <password>"
    echo "    See 'man curl' for details."
    echo "Config parameter [ip_command] is optional. It specifies a command"
    echo "    passed to 'bash -c [ip_command] 2>&1' to determine current"
    echo "    public IP. If not provided, default is 'curl -s $PUBLIC_IP_URL'."
    echo "    Useful if you don't want to rely on $PUBLIC_IP_URL to determine"
    echo "    your public IP when you have a different way to determine."
    echo "    Example: \"ip -f inet a show br-extenral | grep -Po 'inet \K[\d.]+'\""
    echo "Default check-interval is $CHECK_INTERVAL."
    echo ""
    echo "This program reads data from $CONFIG and updates relevant DNS records managed by noip.com."
    echo "It also auto-confirms any expiring hosts via noip API."
    echo "Current IP address is re-checked using [ip_command] every [check-interval] seconds, upon change the DNS records are updated."
    echo "The URL $NOIP_UPDATE_URL is used to update DNS records."
    echo "Expiry check is performed per .netrc file, once every $EXPIRY_CHECK_INTERVAL seconds."
    echo "The URL https://my.noip.com/api/host/<host-id>/touch is used to auto-confirm expiring hosts."
    exit 0
fi


if [ ! -r "$CONFIG" ]
then
    fail "Cannot read config file!"
fi

declare -A IP
declare -A TIME_EXPIRY_CHECK
while true
do
    LINE_NUM=0
    CONFIG_HAS_DATA=0
    while read -r line
    do
        TIME_NOW=$(date +%s)
        LINE_NUM=$((LINE_NUM+1))
        if [ "${line::1}" == "#" ]
        then
            continue
        fi
	HOST=$(echo "$line" | awk -F'\t' '{print $1}')
	NETRC=$(echo "$line" | awk -F'\t' '{print $2}')
	IP_COMMAND=$(echo "$line" | awk -F'\t' '{print $3}')
        if [ -z "$IP_COMMAND" ]
        then
           IP_COMMAND=$DEFAULT_IP_COMMAND 
        fi
        if [ -z "$HOST" ] || [ -z "$NETRC" ]
        then
            warn "Config line $LINE_NUM is invalid, skipping..."
            continue
        fi
        CONFIG_HAS_DATA=1
	NEW_IP=$(echo "$IP_COMMAND" | bash -s 2>&1)
        if [ $? -ne 0 ] || [[ ! "$NEW_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
        then
            INTERNET_CHECK_RESULT='failed'
            $INTERNET_CHECK_COMMAND && INTERNET_CHECK_RESULT='passed'
            warn "Could not determine current IP! Got: '$NEW_IP'. Internet connectivity check $INTERNET_CHECK_RESULT."
        continue
        fi
	# the code below doesn't work, need array-based TIME_UPDATE, and -n TIME_UPDATE is always false
	# disabling for now
        #if [ -n "$TIME_UPDATE" ] && [ "$((TIME_NOW-TIME_UPDATE))" -ge "$RENEW_INTERVAL" ]
        #then
        #    info "$RENEW_INTERVAL seconds passed since last update, forcing renewal"
        #    IP[$HOST]=''
        #fi
        if [ ! "$NEW_IP" == "${IP[$HOST]}" ]
        then
            if [ -n "${IP[$HOST]}" ]
            then
                info "IP change detected for hostname $HOST, new address: $NEW_IP. Updating DNS record..."
            fi
            RESULT=$(curl -s --netrc-file "$NETRC" "$NOIP_UPDATE_URL?hostname=$HOST&myip=$NEW_IP" 2>&1)
            info "login $LOGIN, host $HOST update IP to $NEW_IP: $RESULT"
            IP[$HOST]="$NEW_IP"
            #TIME_UPDATE=`date +%s` # this logic does not work, needs rework
        fi
    done < "$CONFIG"
    if [ $CONFIG_HAS_DATA -eq 0 ]
    then
        warn "Config file $CONFIG has no usable data, will do nothing this interval..."
    else
        NETRC_FILES="$(grep -v '^#' $CONFIG | awk -F'\t' '{print $2}' | sort -u)"
        while read -r NETRC_FILE
        do
            if [ -z ${TIME_EXPIRY_CHECK[$NETRC_FILE]} ] || [ "$((TIME_NOW-TIME_EXPIRY_CHECK[$NETRC_FILE]))" -ge "$EXPIRY_CHECK_INTERVAL" ]
            then
                USER=$(awk '{print $4}' $NETRC_FILE)
                info "Expiry check: it's time to check noip hosts owned by user $USER for expiry..."
                PSWD=$(awk '{print $6}' $NETRC_FILE)
                TMP_COOKIE_FILE=$(mktemp /tmp/noip.XXXXXX)
                LOGIN_PAGE="$(curl -c $TMP_COOKIE_FILE $NOIP_LOGIN_PAGE 2>/dev/null)"
                LOGIN_TOKEN=$(echo "$LOGIN_PAGE" | grep token | grep -o 'value=".*"' | cut -d\" -f2 | head -n 1)
                LOGIN_ATTEMPT="$(curl -L -b $TMP_COOKIE_FILE -c $TMP_COOKIE_FILE -d "username=${USER}&password=${PSWD}&submit_login_page=1&_token=${LOGIN_TOKEN}&Login=" $NOIP_LOGIN_PAGE 2>/dev/null)"
                CSRF_TOKEN=$(echo "$LOGIN_ATTEMPT" | grep meta | grep token | grep -o 'content=".*"' | cut -d\" -f2)
                HOSTS_JSON="$(curl -b $TMP_COOKIE_FILE -c $TMP_COOKIE_FILE -H "X-CSRF-TOKEN: $CSRF_TOKEN" -H "X-Requested-With: XMLHttpRequest" $NOIP_API_HOSTS_URL 2>/dev/null)"
                EXPIRING_HOSTS="$(echo "$HOSTS_JSON" | jq -r '.hosts[] | select(.is_expiring_soon or .is_expired) | [.id, .hostname] | @tsv')"
                HOST_COUNT=$(echo -n "$EXPIRING_HOSTS" | grep -c '^')
                info "Expiry check: $HOST_COUNT expiring soon / expired hosts found."
                while read -r line
                do
                    HOST_ID=$(echo "$line" | awk -F'\t' '{print $1}')
                    HOST_HOSTNAME=$(echo "$line" | awk -F'\t' '{print $2}')
                    if [ -n "$HOST_ID" ]
                    then
                        info "Expiry check: host $HOST_HOSTNAME is expiring soon, confirming via API..."
                        RESULT_JSON="$(curl -b $TMP_COOKIE_FILE -c $TMP_COOKIE_FILE -H "X-CSRF-TOKEN: $CSRF_TOKEN" -H "X-Requested-With: XMLHttpRequest" ${NOIP_API_HOSTS_URL}${HOST_ID}/touch 2>/dev/null)"
                        if [ $? -eq 0 ] && [ -z "$(echo "$RESULT_JSON" | jq ".hosts[] | select(.id==$HOST_ID) | select(.is_expiring_soon or .is_expired)")" ]
                        then
                            info "Expiry check: host $HOST_HOSTNAME confirmed successfully!"
                        else
                            warn "Expiry check: host $HOST_HOSTNAME could not be auto-confirmed, something went wrong. Request output: $RESULT_JSON" 
                        fi
              fi
              break
                done <<< "$EXPIRING_HOSTS"
                TIME_EXPIRY_CHECK[$NETRC_FILE]=$(date +%s)
                rm $TMP_COOKIE_FILE
            fi
        done <<< "$NETRC_FILES"
    fi
    sleep $CHECK_INTERVAL
done
