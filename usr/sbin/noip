#!/bin/bash

function fail()
{
    echo "ERROR: $1" 1>&2
    exit 1
}

function warn()
{
    echo "WARNING: $1" 1>&2
}

function info()
{       
    echo "INFO: $1"
}

CONFIG="/etc/noip/noip.conf"
INTERNET_CHECK_COMMAND="ping -c3 8.8.8.8"
PUBLIC_IP_URL="http://myexternalip.com/raw"
NOIP_UPDATE_HOST="dynupdate.no-ip.com"
NOIP_UPDATE_URL="https://$NOIP_UPDATE_HOST/nic/update"
DEFAULT_IP_COMMAND="curl -s $PUBLIC_IP_URL"
CHECK_INTERVAL=60
RENEW_INTERVAL=604800 # 7 days

if [ "$1" == "-h" ] || [ "$1" == "--help" ]
then
    echo "USAGE: noip [check-interval]"
    echo "CONFIG FILE: $CONFIG"
    echo "CONFIG FILE SYNTAX:"
    echo "    <hostname> <cred-file> [ip_command]"
    echo "    Tab-separated. Can contain multiple lines."
    echo "Config parameter <cred-file> should specify a path to a curl netrc file."
    echo "    Syntax is:"
    echo "        machine $NOIP_UPDATE_HOST login <login> password <password>"
    echo "    See 'man curl' for details."
    echo "Config parameter [ip_command] is optional. It specifies a command"
    echo "    passed to 'bash -c [ip_command] 2>&1' to determine current"
    echo "    public IP. If not provided, default is 'curl -s $PUBLIC_IP_URL'."
    echo "    Useful if you don't want to rely on $PUBLIC_IP_URL to determine"
    echo "    your public IP when you have a different way to determine."
    echo "    Example: \"ip -f inet a show br-extenral | grep -Po 'inet \K[\d.]+'\""
    echo "Default check-interval is $CHECK_INTERVAL."
    echo ""
    echo "This program reads data from $CONFIG and updates relevant DNS records managed by no-ip.com."
    echo "Current IP address is re-checked using [ip_command] every [check-interval] seconds, upon change the DNS records are updated."
    echo "The URL $NOIP_UPDATE_URL is used to update DNS records."
    exit 0
fi


if [ ! -r "$CONFIG" ]
then
    fail "Cannot read config file!"
fi

declare -A IP
while true
do
    LINE_NUM=0
    while read line
    do
        TIME_NOW=`date +%s`
        LINE_NUM=$(($LINE_NUM+1))
        if [ "${line::1}" == "#" ]
        then
            continue
        fi
        HOST=`echo "$line" | awk -F'\t' '{print $1}'`
        NETRC=`echo "$line" | awk -F'\t' '{print $2}'`
        IP_COMMAND=`echo "$line" | awk -F'\t' '{print $3}'`
        if [ -z "$IP_COMMAND" ]
        then
           IP_COMMAND=$DEFAULT_IP_COMMAND 
        fi
        if [ -z "$HOST" ] || [ -z "$NETRC" ]
        then
            warn "Config line $LINE_NUM is invalid, skipping..."
            continue
        fi
        NEW_IP=`echo "$IP_COMMAND" | bash -s 2>&1`
        if [ "$?" -ne "0" ] || [[ ! "$NEW_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
        then
            INTERNET_CHECK_RESULT='failed'
            $INTERNET_CHECK_COMMAND && INTERNET_CHECK_RESULT='passed'
            warn "Could not determine current IP! Got: '$NEW_IP'. Internet connectivity check $INTERNET_CHECK_RESULT."
        continue
        fi
        if [ -n "$TIME_UPDATE" ] && [ "$((TIME_NOW-TIME_UPDATE))" -ge "$RENEW_INTERVAL" ]
        then
            info "$RENEW_INTERVAL seconds passed since last update, forcing renewal"
            IP[$HOST]=''
        fi
        if [ ! "$NEW_IP" == "${IP[$HOST]}" ]
        then
            if [ -n "${IP[$HOST]}" ]
            then
                info "IP change detected for hostname $HOST, new address: $NEW_IP. Updating DNS record..."
            fi
            RESULT=$(curl -s --netrc-file "$NETRC" "$NOIP_UPDATE_URL?hostname=$HOST&myip=$NEW_IP" 2>&1)
            info "login $LOGIN, host $HOST update IP to $NEW_IP: $RESULT"
            IP[$HOST]="$NEW_IP"
            TIME_UPDATE=`date +%s`
        fi
    done < "$CONFIG"
    sleep $CHECK_INTERVAL
done
